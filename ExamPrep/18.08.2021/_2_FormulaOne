import java.util.Arrays;
import java.util.Scanner;

public class _2_FormulaOne {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);

        int dim = Integer.parseInt(scan.nextLine());

        int commandsCnt = Integer.parseInt(scan.nextLine());

        String[][] racingTrack = new String[dim][dim];
        racingTrack = getRacingTrack(dim, racingTrack, scan);

        int[] playerPosition = new int[2];
        playerPosition = getPlayerPosition(racingTrack, playerPosition, dim);

        boolean finished = false;

        while (commandsCnt-- > 0 && !finished) {

            String command = scan.nextLine();

            switch (command) {
                case "up":
                    racingTrack[playerPosition[0]][playerPosition[1]] = ".";
                    playerPosition[0] -= 1;
                    playerPosition = checkForScope(playerPosition, racingTrack, dim);

                    if (checkForBonus(playerPosition, racingTrack, dim)) {
                        playerPosition[0] -= 1;
                    }
                    if (checkForTrap(playerPosition, racingTrack, dim)) {
                        playerPosition[0] += 1;
                    }
                    if (racingTrack[playerPosition[0]][playerPosition[1]].equals("F")) {
                        finished = true;
                    }
                    racingTrack[playerPosition[0]][playerPosition[1]] = "P";
                    break;
                case "down":
                    racingTrack[playerPosition[0]][playerPosition[1]] = ".";
                    playerPosition[0] += 1;
                    playerPosition = checkForScope(playerPosition, racingTrack, dim);

                    if (checkForBonus(playerPosition, racingTrack, dim)) {
                        playerPosition[0] += 1;
                    }
                    if (checkForTrap(playerPosition, racingTrack, dim)) {
                        playerPosition[0] -= 1;
                    }
                    if (racingTrack[playerPosition[0]][playerPosition[1]].equals("F")) {
                        finished = true;
                    }
                    racingTrack[playerPosition[0]][playerPosition[1]] = "P";
                    break;
                case "left":
                    racingTrack[playerPosition[0]][playerPosition[1]] = ".";
                    playerPosition[1] -= 1;
                    playerPosition = checkForScope(playerPosition, racingTrack, dim);

                    if (checkForBonus(playerPosition, racingTrack, dim)) {
                        playerPosition[1] -= 1;
                    }
                    if (checkForTrap(playerPosition, racingTrack, dim)) {
                        playerPosition[1] += 1;
                    }
                    if (racingTrack[playerPosition[0]][playerPosition[1]].equals("F")) {
                        finished = true;
                    }
                    racingTrack[playerPosition[0]][playerPosition[1]] = "P";
                    break;
                case "right":
                    racingTrack[playerPosition[0]][playerPosition[1]] = ".";
                    playerPosition[1] += 1;
                    playerPosition = checkForScope(playerPosition, racingTrack, dim);

                    if (checkForBonus(playerPosition, racingTrack, dim)) {
                        playerPosition[1] += 1;
                    }
                    if (checkForTrap(playerPosition, racingTrack, dim)) {
                        playerPosition[1] -= 1;
                    }
                    if (racingTrack[playerPosition[0]][playerPosition[1]].equals("F")) {
                        finished = true;
                    }
                    racingTrack[playerPosition[0]][playerPosition[1]] = "P";
                    break;
            }
        }

        if (finished) {
            System.out.println("Well done, the player won first place!");
        } else {
            System.out.println("Oh no, the player got lost on the track!");
        }

        printRacingTrack(racingTrack, dim);
    }

    private static void printRacingTrack(String[][] racingTrack, int dim) {

        for (int row = 0; row < dim; row++) {
            for (int col = 0; col < dim; col++) {
                System.out.print(racingTrack[row][col]);
            }
            System.out.println();
        }
    }

    private static boolean checkForTrap(int[] playerPosition, String[][] racingTrack, int dim) {

        String elementToHit = "T";
        return findElement(playerPosition, racingTrack, dim, elementToHit);
    }

    private static boolean checkForBonus(int[] playerPosition, String[][] racingTrack, int dim) {

        String elementToHit = "B";
        return findElement(playerPosition, racingTrack, dim, elementToHit);
    }

    private static boolean findElement(int[] playerPosition, String[][] racingTrack, int dim, String elementToHit) {

        for (int row = 0; row < dim; row++) {
            for (int col = 0; col < dim; col++) {
                if (racingTrack[playerPosition[0]][playerPosition[1]].equals(elementToHit)) {
                    return true;
                }
            }
        }
        return false;
    }

    private static int[] checkForScope(int[] playerPosition, String[][] racingTrack, int dim) {

        if (playerPosition[0] < 0) {
            playerPosition[0] = dim - 1;
        } else if (playerPosition[0] >= dim) {
            playerPosition[0] = 0;
        } else if (playerPosition[1] < 0) {
            playerPosition[1] = dim - 1;
        } else if (playerPosition[1] >= dim) {
            playerPosition[1] = 0;
        }
        return playerPosition;
    }

    private static int[] getPlayerPosition(String[][] racingTrack, int[] playerPosition, int dim) {
        boolean isFound = false;

        for (int row = 0; row < dim; row++) {
            for (int col = 0; col < dim; col++) {
                if (racingTrack[row][col].equals("P")) {
                    playerPosition[0] = row;
                    playerPosition[1] = col;
                    isFound = true;
                    break;
                }
            }
            if (isFound) {
                break;
            }
        }
        return playerPosition;
    }

    private static String[][] getRacingTrack(int dim, String[][] racingTrack, Scanner scan) {

        for (int row = 0; row < dim; row++) {
            String[] arr = scan.nextLine().split("");
            racingTrack[row] = arr;
        }
        return racingTrack;
    }
}
